//!Incomplete
//!Key pressing/release not working

#include <Veritas/Definitions/Definitions.h>
#ifdef LINUX

#include "Keyboard.h"
#include <X11/Xlib.h>

using namespace Silexars;
using namespace System;
using namespace IO;
using namespace Devices;

#include "../../Managers/Manager.h"

uint8 Keyboard::translationTable[256] = {
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    Keyboard::ESCAPE, // 9
    Keyboard::N1, // 10
    Keyboard::N2,
    Keyboard::N3,
    Keyboard::N4,
    Keyboard::N5,
    Keyboard::N6,
    Keyboard::N7,
    Keyboard::N8,
    Keyboard::N9,
    Keyboard::N0,
    Keyboard::MINUS,
    Keyboard::EQUAL,
    Keyboard::BACKSPACE, // 22
    Keyboard::TAB,
    Keyboard::Q,
    Keyboard::W,
    Keyboard::E,
    Keyboard::R,
    Keyboard::T,
    Keyboard::Y,
    Keyboard::U,
    Keyboard::I,
    Keyboard::O,
    Keyboard::P,
    Keyboard::OPEN_SQUARE_BRACKET,
    Keyboard::CLOSE_SQUARE_BRACKET,
    Keyboard::RETURN,
    Keyboard::LCONTROL,
    Keyboard::A,
    Keyboard::S,
    Keyboard::D,
    Keyboard::F,
    Keyboard::G,
    Keyboard::H,
    Keyboard::J,
    Keyboard::K,
    Keyboard::L,
    Keyboard::SEMICOLON,
    Keyboard::APOSTROPHE,
    Keyboard::GRAVE, // 49
    Keyboard::LSHIFT,
    51, // ?
    Keyboard::Z,
    Keyboard::X,
    Keyboard::C,
    Keyboard::V,
    Keyboard::B,
    Keyboard::N,
    Keyboard::M,
    Keyboard::COMMA,
    Keyboard::DOT,
    Keyboard::SLASH,
    Keyboard::RSHIFT,
    Keyboard::PADMUL,
    Keyboard::LALT,
    Keyboard::SPACEBAR,
    Keyboard::CAPS_LOCK,
    Keyboard::F1, // 65
    Keyboard::F2,
    Keyboard::F3,
    Keyboard::F4,
    Keyboard::F5,
    Keyboard::F6,
    Keyboard::F7,
    Keyboard::F8,
    Keyboard::F9,
    Keyboard::F10, // 76
    Keyboard::NUM_LOCK,
    Keyboard::SCROLL_LOCK,
    Keyboard::PAD7,
    Keyboard::PAD8,
    Keyboard::PAD9,
    Keyboard::PADMINUS,
    Keyboard::PAD4,
    Keyboard::PAD5,
    Keyboard::PAD6,
    Keyboard::PADPLUS,
    Keyboard::PAD1,
    Keyboard::PAD2,
    Keyboard::PAD3,
    Keyboard::PAD0,
    Keyboard::PADDOT,
    92,
    93,
    Keyboard::BACKSLASH2,
    Keyboard::F11, // 95
    Keyboard::F12, // 96
    Keyboard::INTERNATIONAL1, // 97 not sure
    98,
    99,
    100,
    101,
    102,
    103,
    Keyboard::PADENTER,
    Keyboard::RCONTROL,
    Keyboard::PADSLASH,
    107,
    Keyboard::RALT,
    109,
    Keyboard::HOME,
    Keyboard::UP,
    Keyboard::PAGEUP,
    Keyboard::LEFT,
    Keyboard::RIGHT,
    Keyboard::END,
    Keyboard::DOWN,
    Keyboard::PAGEDOWN,
    Keyboard::INSERT,
    Keyboard::DEL,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    Keyboard::PAUSE,
    128,
    129,
    130,
    131,
    132,
    Keyboard::LGUI, // 133
    Keyboard::RGUI, // 134
    Keyboard::APPLICATION, // 135
    136,
    137,
    138,
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159,
    160,
    161,
    162,
    163,
    164,
    165,
    166,
    167,
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    177,
    178,
    179,
    180,
    181,
    182,
    183,
    184,
    185,
    186,
    187,
    188,
    189,
    190,
    191,
    192,
    193,
    194,
    195,
    196,
    197,
    198,
    199,
    200,
    201,
    202,
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230,
    231,
    232,
    233,
    234,
    235,
    236,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    245,
    246,
    247,
    248,
    249,
    250,
    251,
    252,
    253,
    254,
    255
};

void Keyboard::press(uint32 key) {
//    uint32 keycode = keyToSystem(key);
//    XTestFakeKeyEvent((::Display) Manager::getManager()->getDeviceManager()->getDisplayManager()->getDefaultDisplay()->id, keycode, True, 0);
}
void Keyboard::release(uint32 key) {
//    uint32 keycode = keyToSystem(key);
//    XTestFakeKeyEvent((::Display) Manager::getManager()->getDeviceManager()->getDisplayManager()->getDefaultDisplay()->id, keycode, False, 0);
}

#endif
